/**
 * Mule FWS Cloud Connector
 *
 * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com
 *
 * The software in this package is published under the terms of the CPAL v1.0
 * license, a copy of which has been included with this distribution in the
 * LICENSE.txt file.
 */

/**
 * This file was automatically generated by the Mule Cloud Connector Development Kit
 */
package org.mule.module.fws;

import org.mule.api.lifecycle.Initialisable;
import org.mule.api.lifecycle.InitialisationException;
import org.mule.module.fws.api.AxisFWSClient;
import org.mule.module.fws.api.FWSClient;
import org.mule.module.fws.api.FWSClientAdaptor;
import org.mule.module.fws.api.ItemCondition;
import org.mule.module.fws.api.ShipmentStatus;
import org.mule.module.fws.api.internal.Address;
import org.mule.module.fws.api.internal.FulfillmentItem;
import org.mule.module.fws.api.internal.FulfillmentPreview;
import org.mule.module.fws.api.internal.GetFulfillmentOrderResult;
import org.mule.module.fws.api.internal.InboundShipmentData;
import org.mule.module.fws.api.internal.MerchantSKUSupply;
import org.mule.module.fws.api.internal.ShipmentPreview;
import org.mule.tools.cloudconnect.annotations.Connector;
import org.mule.tools.cloudconnect.annotations.Operation;
import org.mule.tools.cloudconnect.annotations.Parameter;
import org.mule.tools.cloudconnect.annotations.Property;

import java.util.Date;
import java.util.List;

/**
 * 
 * @author flbulgarelli
 */
@Connector(namespacePrefix = "fws")
public class FWSCloudConnector implements Initialisable
{
    @Property(optional = true)
    private FWSClient<RuntimeException> client;
    @Property
    private String accessKey;
    @Property
    private String secretKey;

    /**
     * Removes items from a pre-existing shipment specified by the ShipmentId. 
     * 
     * This operation removes the items
     * specified in each MerchantSKU parameter from the shipment in their entirety, no matter the quantity.
     * If the MerchantSKU is not currently a part of the shipment, then that particular line item is ignored, but others are still processed.
     * 
     * {@code <delete-inbound-shipment-items merchantSku="#[header:merchantSku]" shipmentId="#[header:shipmentId]" />}
     * 
     * @param merchantSku
     * @param shipmentId
     */
    @Operation public void deleteInboundShipmentItems(@Parameter String merchantSku, @Parameter String shipmentId)
    {
        client.deleteInboundShipmentItems(merchantSku, shipmentId);
    }
    
    /**
     * Gets the Fulfillment Network SKU (FNSKU) for each supplied merchant item—creating one if needed.
     * 
     * This operation is  idempotent in that it can be called multiple times without any adverse effects. This operation is required whenever you need to register items
     * for Amazon fulfillment that require labeling and when you need to get the identifier prior to creating an offer. This operation is necessary to register items for Amazon
     * fulfillment in order to send them to Amazon, but does not do the work of marking any offer for this item as Amazon fulfilled.
     * A response does not imply that the item has an offer for which it can be fulfilled; only that the Amazon Fulfillment Network can track it. An inactive item can have a
     * quantity in the fulfillment center, but will never be fulfilled.
     * Use this operation instead of GetFulfillmentIdentifierForMSKU if an offer does not already exist for the MerchantSKU.
     * 
     * {@code <get-fulfillment-identifier
     *      asin="#[variable:asin]"
     *      itemCondition="#[variable:itemCondition]"
     *      merchantSku="#[variable:merchantSku]" />}
     * @param asin
     * @param itemCondition
     * @param merchantSku
     * @return 
     */
    @Operation public List<FulfillmentItem> getFulfillmentIdentifier(String asin, ItemCondition itemCondition, String merchantSku)
    {
        return client.getFulfillmentIdentifier(asin, itemCondition, merchantSku);
    }
    
    /**
     * Gets the Fulfillment Network SKU (FNSKU) for each supplied merchant item—creating one if needed. 
     * 
     * This operation is idempotent in that you can call it multiple times without any adverse effects. 
     * This operation is required whenever you need to register items for Amazon fulfillment that require
     * labeling. This operation is necessary to register items for Amazon fulfillment in order to send them to Amazon, but doesn't mark any offer for this item as 
     * Amazon fulfilled.
     * A response does not imply that the item has an offer for which it can be fulfilled; only that the Amazon Fulfillment Network can track it. An inactive item can have a
     * quantity in the fulfillment center, but will never be fulfilled.
     * Use this operation instead of GetFulfillmentIdentifier if an offer already exists for the SKU.
     * 
     * {@code <get-fulfillment-identifier-for-msku merchantSku="#[map-payload:merchantSku]"/>}
     * @param merchantSku
     * @return 
     */
    @Operation public List<FulfillmentItem> getFulfillmentIdentifierForMsku(String merchantSku)
    {
        return client.getFulfillmentIdentifierForMsku(merchantSku);
    }
 
    /**
     * Gets fulfillment item data for the provided Fulfillment Network SKUs (FNSKUs). 
     * If any of the provided FNSKUs are invalid they are ignored and only the valid SKUs are returned.
     * A response does not imply that the item has an offer for which it can be fulfilled; only that the Amazon Fulfillment Network
     * can track it. An inactive item can have a quantity in the fulfillment center, but will never be fulfilled. 
     *
     * {@code <get-fulfillment-item-by-fnsku fulfillmentNetworkSku="#[payload]" />}
     * 
     * @param fulfillmentNetworkSku
     * @return 
     */
    @Operation public List<FulfillmentItem> getFulfillmentItemByFnsku(String fulfillmentNetworkSku)
    {
        return client.getFulfillmentItemByFnsku(fulfillmentNetworkSku);
    }

    /**
     * Gets fulfillment item data for the provided Merchant SKUs. 
     * 
     * If any of the provided MSKUs are invalid (e.g. does not have an assigned Fulfillment Network SKU), they are ignored and only the valid SKUs are returned.
     * A response does not imply that the item has an offer for which it can be fulfilled; only that the Amazon Fulfillment Network can track it. An inactive item can have a quantity in the fulfillment center, but will never be fulfille
     * 
     * {@code <get-fulfillment-item-by-msku merchantSku="#[map-payload:merchantSku]"/>}
     * @param merchantSku
     * @return 
     */
    @Operation public List<FulfillmentItem> getFulfillmentItemByMsku(String merchantSku)
    {
        return client.getFulfillmentItemByMsku(merchantSku);
    }
 
    /**
     * Gets inbound shipment data without the item details for a given ShipmentId.
     * {@code <get-inbound-shipment-data shipmentId="#[header:ShipmentId]"/>}
     * 
     * @param shipmentId
     * @return 
     */
    @Operation public InboundShipmentData getInboundShipment(String shipmentId)
    {
        return client.getInboundShipment(shipmentId);
    }
 
    /**
     * Gets the information needed to create a set of shipments for a given set of items and the ship from address. 
     * 
     * You might need to create multiple shipments for various reasons, but the most common reason is when there are sortable and non-sortable items. 
     * In this case, there is one shipment for each of the shipment sets returned.
     *
     * {@code <get-inbound-shipment-preview  merchantSku="AF15962"  address="#[address]" />}
     * @param merchantSku
     * @param address
     * @return the list of previews 
     */
    @Operation public List<ShipmentPreview> getInboundShipmentPreview(String merchantSku, Address address) 
    {
        return client.getInboundShipmentPreview(merchantSku, address);
    }
 
    /**
     * Answers a brief status message from the service
     * 
     * {@code <get-inbound-service-status/>}
     * @return the status message
     */
    @Operation public String getInboundServiceStatus() 
    {
        return client.getInboundServiceStatus();
    }
    
    /**
     * Lazily lists fulfillment items registered.
     * 
     * If IncludeInactive is set to True, the operation returns both active (available for fulfillment) and inactive (not available for fulfillment) mappings. This parameter defaults to False. You can use inactive mappings to track inventory in Amazon's fulfillment centers; however, inactive items can't be fulfilled.
     * {@code <list-fulfillment-items includeInactive="true"/>}
     * 
     * @param includeInactive
     */
    @Operation public Iterable<?> listFulfillmentItems(boolean includeInactive)
    {
        return client.listFulfillmentItems(includeInactive);
    }

    /**
     * TODO
     * 
     * {@code <list-inbound-shipment-items shipmentId="#[header:shipmentId]"/>}
     * 
     * @param shipmentId
     * @return
     */
    @Operation public Iterable<?> listInboundShipmentItems(String shipmentId)
    {
       return client.listInboundShipmentItems(shipmentId); 
    }
 
    /**
     * Lazily lists the inbound shipments a merchant has created, according to the specified query parameters. 
     * 
     * {@code <list-inbound-shipments shipmentStatus="CANCELED" createdAfter="#[varaible:creationDate]" />}
     * 
     * @param shipmentStatus
     * @param createdAfter
     */
    @Operation public Iterable<?> listInboundShipments(ShipmentStatus shipmentStatus, Date createdAfter)
    {
        return client.listInboundShipments(shipmentStatus, createdAfter);
    }

    /**
     * Adds or replaces inbound shipment data (minus the item details) for a given shipmentId.
     * 
     * {@code <put-inbound-shipment-data 
     *      shipmentId="#[variable:shipmentId]" 
     *      shipmentName="#[variable:shipmentName]"
     *      destinationFulfillmentCenter="#[variable:destinationFulfillmentCenter]"
     *      shipFromAddress="#[variable:shipFromAddress]" />}
     *      
     * @param shipmentId
     * @param shipmentName
     * @param destinationFulfillmentCenter
     * @param shipFromAddress
     */
    @Operation public void putInboundShipment(String shipmentId, String shipmentName, String destinationFulfillmentCenter, String shipFromAddress)
    {
        //TODO putShipment vs putSHipmentData
        client.putInboundShipment(shipmentId, shipmentName, destinationFulfillmentCenter, shipFromAddress);
    }
    
    /**
     * Adds line items to a pre-existing shipment that the ShipmentId specifies. 
     * 
     * If the MerchantSKU is already in the shipment, then that particular line item is replaced. 
     * Call PutInboundShipment to create a new shipment. 
     * This call returns an exception if you attempt to add line items to a shipment that is in a status other than Working.
     * 
     * {@code <put-inbound-shipment-items
     *      shipmentId="#[variable:shipmentId]"
     *      merchantSku="#[variable:merchantSku]"
     *      quantity="#[variable:quantity]"/>}
     * @param shipmentId
     * @param merchantSku
     * @param quantity
     */
    @Operation public void putInboundShipmentItems(String shipmentId, String merchantSku, int quantity)
    {
        client.putInboundShipmentItems(shipmentId, merchantSku, quantity);
    }
 
    /**
     * Sets the inbound shipment status to the specified ShipmentStatus.
     * Once a shipment's status has been set to Shipped, you cannot make any further changes except to update the status to Cancelled. Any item not received at the time a shipment is cancelled is put into problem receive at the fulfillment center.
     * 
     * This operation returns a RequestId upon success, otherwise an explicit error is returned.
     * {@code <set-inbound-shipment-status
     *      shipmentId="#[variable:shipmentId]"
     *      shipmentStatus="SHIPPED"/>}
     * @param shipmentId
     * @param shipmentStatus
     */
    @Operation public void setInboundShipmentStatus(String shipmentId, ShipmentStatus shipmentStatus)
    {
        client.setInboundShipmentStatus(shipmentId, shipmentStatus);
    }

 
    /**
     * Requests Amazon not to fulfill an existing fulfillment order. This is just a hint, already shipped 
     * orders may not be canceled.
     * 
     * {@code <cancel-fulfillment-order orderId="#[header:orderId]"/>}
     * @param orderId
     */
    @Operation public void cancelFulfillmentOrder(String orderId)
    {
        client.cancelFulfillmentOrder(orderId);
    }

    /**
     * Generates a request for Amazon to ship items from the merchant's inventory to a destination address.
     * 
     * {@code <create-fulfillment-order orderId="#[orderId]" /> }
     * @param orderId
     */
    @Operation public void createFulfillmentOrder(String orderId)
    {
        //TODO
        client.createFulfillmentOrder(orderId);
    }

    /**
     * Gets the original fulfillment order request, the status of
     * both the order and its items in the Amazon Fulfillment Network, 
     * and the shipments that have been generated to fulfill the order.
     * 
     * {@code <insert-element orderId="#[map-payload:orderId]"/> }
     * @param orderId
     * @return 
     */
    @Operation public GetFulfillmentOrderResult getFulfillmentOrder(String orderId)
    {
        return client.getFulfillmentOrder(orderId);
    }

    /**
     * Answers estimated shipping dates and fees for a given set of merchant SKUs and quantities.
     * 
     * {@code <get-fulfillment-preview
     *     address="#[variable:address]" 
     *     merchantSku="FHUD4896" 
     *     shippingSpeedCategories="Standard"
     *     quantity="15"
     *     orderItemId="X123698" /> }
     *
     * @param merchantSku
     * @param shippingSpeedCategories
     * @param quantity
     * @param orderItemId
     * @return 
     */
    @Operation public List<FulfillmentPreview> getFulfillmentPreview(Address address, String merchantSku, String shippingSpeedCategories, int quantity, String orderItemId)
    {
        return client.getFulfillmentPreview(address, merchantSku, shippingSpeedCategories /*TODO*/, quantity, orderItemId);
    }


    /**
     * Answers a brief status message from the service
     * 
     * {@code <get-outbound-service-status/>}
     * @return the status message
     */
    @Operation public String getOutboundServiceStatus()
    {
        return client.getOutboundServiceStatus();
    }


    /**
     * Lazily lists all the fulfillment orders
     * 
     * {@code <list-fulfillment-orders/> } 
     */
    @Operation public void listFulfillmentOrders()
    {
        /*TODO*/
        client.listFulfillmentOrders();
    }
 
     
     /**
      *  Gets information about the supply of merchant-owned inventory in Amazon's fulfillment network. 
      *  
      *  This operation does not return inventory that is unsellable or that }
      *  is already bound to a customer order or bound to internal fulfillment center processing (for example, labeling).
      *  
      *  {@code <get-inventory-supply 
      *     merchantSku="#[header:merchantSku]" 
      *     responseGroup="DETAILED"/> }
      * @param merchantSku
      * @param responseGroup
     *  @return 
      */
     @Operation public List<MerchantSKUSupply> getInventorySupply(String merchantSku, String responseGroup)
     {
         return client.getInventorySupply(merchantSku, responseGroup);
     }

    
    /**
     * Answers a brief status message from the service
     * 
     * {@code <get-inventory-service-status/>}
     * @return the status message 
     */
     @Operation public String getInventoryServiceStatus()
     {
         return client.getInventoryServiceStatus();
     }

    /**
     * TODO
     * 
     * {@code <list-updated-inventory-supply 
     *      startDateTime="#[header:querystartDateTime]" 
     *      responseGroup="DETAILED" /> }
     * 
     * @param startDateTime
     * @param responseGroup
     */
    @Operation public void listUpdatedInventorySupply(Date startDateTime, String responseGroup) 
    {
        /*TODO*/
        client.listUpdatedInventorySupply(startDateTime, responseGroup);
    }

    public void initialise() throws InitialisationException
    {
        if (client == null)
        {
            setClient(new AxisFWSClient(accessKey, secretKey));
        }   
    }

    public FWSClient<RuntimeException> getClient()
    {
        return client;
    }

    public void setClient(FWSClient<?> client)
    {
        this.client = FWSClientAdaptor.adapt(client);
    }

    public String getAccessKey()
    {
        return accessKey;
    }

    public void setAccessKey(String accessKey)
    {
        this.accessKey = accessKey;
    }

    public String getSecretKey()
    {
        return secretKey;
    }

    public void setSecretKey(String secretKey)
    {
        this.secretKey = secretKey;
    }
}
